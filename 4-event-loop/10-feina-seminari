console.log("Inicio");

// Función para obtener un usuario de una API
function getUser(userId) {
  return fetch(`https://jsonplaceholder.typicode.com/users/${userId}`)
    .then(response => {
      if (!response.ok) throw new Error("Error al obtener el usuario");
      return response.json();
    });
}

// Función para obtener los posts de un usuario
function getPosts(userId) {
  return fetch(`https://jsonplaceholder.typicode.com/posts?userId=${userId}`)
    .then(response => {
      if (!response.ok) throw new Error("Error al obtener los posts");
      return response.json();
    });
}

// Función para obtener los comentarios del post
function getComments(postId) {
  return fetch(`https://jsonplaceholder.typicode.com/comments?postId=${postId}`)
    .then(response => {
      if (!response.ok) throw new Error("Error al obtener comentarios del post");
      return response.json();
    });
}

async function fetchOrderDetails() {
    const allComments = [];
    try {
    const user = await getUser(1);
    const posts = await getPosts(user.id);
    const commentsPromises = posts.map(post => getComments(post.id));
    //Retorna un array amb les promeses de cada petició de comentaris
    const commentsResults = await Promise.all(commentsPromises);
    //commentsResults és un vector de 10 posicions, on cada posició és un vector amb els comentaris del post
    //El que ha fet és esperar a tenir totes les promeses resoltes i les ha guardat en un vector
    //console.log(commentsResults)


    commentsResults.forEach((commentsResults) => {
        commentsResults.forEach((comment) => {
            allComments.push(comment);
        });
    });
    //allComments és un vector amb tots els comentaris de cada post units, és a dir, de 50 posicions

    console.log(allComments.length);
    console.log(commentsResults.length);
    console.log(commentsResults[0]);
    console.log(allComments[0]);    
  } catch (error) {
    console.error("Error:", error);
  }
    return allComments;
}

fetchOrderDetails().then(allComments => {
  const allCommentsTreated = allComments
  .filter(comment => comment.id>= 25)
  .sort((a,b) => b.id - a.id)
  .map(comment => comment.id + 25);
  console.log(allCommentsTreated)
});


console.log("Inicio");





